// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id // Solana public key
  name          String
  theme         String?            @default("dark")
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  linkCodes     LinkCode[]
  deviceAuth    DeviceAuth[]
  savedNodes     UserSavedNode[]
  devices        DeviceConnection[]
  deployedNodes  UserDeployedNode[]
  vultrInstances VultrInstance[]
}

model Node {
  id          String   @id @default(uuid())
  name        String
  country     String
  countryCode String
  ipAddress   String
  protocol    String? // HTTP, HTTPS, SOCKS5
  port        Int
  username    String?
  password    String?
  region      String
  supportsUDP Boolean  @default(false)
  isActive    Boolean  @default(true)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  savedBy    UserSavedNode[]
  deployedBy UserDeployedNode[]
}

model UserSavedNode {
  id        String   @id @default(uuid())
  userId    String
  nodeId    String
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  node Node @relation(fields: [nodeId], references: [id])

  @@unique([userId, nodeId])
  @@index([userId, isPrimary])
}

model UserDeployedNode {
  id         String   @id @default(uuid())
  userId     String
  nodeId     String
  deployedAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  node Node @relation(fields: [nodeId], references: [id])

  @@unique([userId, nodeId])
}

model DeviceConnection {
  id         String     @id @default(uuid())
  userId     String
  user       User       @relation(fields: [userId], references: [id])
  deviceType String     @default("CHROME_EXTENSION")
  deviceName String?
  lastSeen   DateTime   @updatedAt
  createdAt  DateTime   @default(now())
  isActive   Boolean    @default(true)
  authId     String     @unique
  auth       DeviceAuth @relation(fields: [authId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
}

model DeviceAuth {
  id         String            @id @default(uuid())
  apiKey     String            @unique
  userId     String
  user       User              @relation(fields: [userId], references: [id])
  createdAt  DateTime          @default(now())
  lastUsed   DateTime          @updatedAt
  connection DeviceConnection?

  @@index([userId])
}

model LinkCode {
  id        String   @id @default(uuid())
  code      String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model VultrInstance {
  id              String   @id @default(uuid())
  vultrId         String   @unique
  userId          String
  label           String?
  region          String
  plan            String
  osId            Int
  status          String
  powerStatus     String
  mainIp          String?
  internalIp      String?
  defaultPassword String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
}
