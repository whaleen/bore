// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String                @id // Solana public key
  name          String
  theme         String?               @default("dark") // Theme preference
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  linkCodes     LinkCode[]
  extensionAuth ExtensionAuth[]
  savedNodes    UserSavedNode[]
  connections   ExtensionConnection[]
}

model ExtensionConnection {
  id         String        @id @default(uuid())
  userId     String
  user       User          @relation(fields: [userId], references: [id])
  deviceName String? // Browser/device identifier
  lastSeen   DateTime      @updatedAt
  createdAt  DateTime      @default(now())
  isActive   Boolean       @default(true)
  authId     String        @unique // Make this unique for one-to-one relation
  auth       ExtensionAuth @relation(fields: [authId], references: [id])

  @@index([userId, isActive])
}

model ExtensionAuth {
  id         String               @id @default(uuid())
  apiKey     String               @unique
  userId     String
  user       User                 @relation(fields: [userId], references: [id])
  createdAt  DateTime             @default(now())
  lastUsed   DateTime             @updatedAt
  connection ExtensionConnection?

  @@index([userId])
}

model Node {
  id          String   @id @default(uuid())
  name        String
  country     String
  countryCode String
  ipAddress   String
  protocol    String? // HTTP, HTTPS, SOCKS5
  port        Int
  username    String? // Optional
  password    String? // Optional
  region      String
  supportsUDP Boolean  @default(false)
  isActive    Boolean  @default(true)
  notes       String? // Optional
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation to users who saved this node
  savedBy UserSavedNode[]
}

model UserSavedNode {
  id        String   @id @default(uuid())
  userId    String
  nodeId    String
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  node Node @relation(fields: [nodeId], references: [id])

  @@unique([userId, nodeId])
  @@index([userId, isPrimary])
}

model LinkCode {
  id        String   @id @default(uuid())
  code      String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}
